#!/bin/bash

RED='\033[0;31m'
PURPLE='\033[0;35m'
GRAY='\033[1;30m'
NC='\033[0m'

myself="$(realpath $0)"
preset_min='7.3 8.* lowest'
preset_max='8.4 12.* stable'
preset_sqlite_min="$preset_min sqlite"
preset_sqlite_max="$preset_max sqlite"
preset_sqlite="$preset_sqlite_max"
preset_mysql_min="$preset_min mysql 5.7"
preset_mysql_max="$preset_max mysql 8.4"
preset_mysql="$preset_mysql_max"
preset_mariadb_min="$preset_min mariadb 10.2"
preset_mariadb_max="$preset_max mariadb 11.7"
preset_mariadb="$preset_mariadb_max"
preset_pgsql_min="$preset_min pgsql 9.6"
preset_pgsql_max="$preset_max pgsql 17.4"
preset_pgsql="$preset_pgsql_max"
preset_sqlsrv_min="8.1 8.* lowest sqlsrv 2019"
preset_sqlsrv_max="$preset_max sqlsrv 2022"
preset_sqlsrv="$preset_sqlsrv_max"
compose_project_name=${PWD##*\/}

# Check if variable exists in .env file
env_exists() {
    touch .env
    grep "$1=" .env >>/dev/null
    return $?
}

# Add variable to .env file unless it already exists
env_add() {
    if ! env_exists $1; then
        echo "$1=$2" >> .env
        return $?
    fi
    return 1
}

# Add or replace variable in .env file
env_replace() {
    env_add ${1} ${2} || sed -i -E "s/^${1}=.*$/${1}=${2}/g" .env
    return $?
}

if [[ $# == 0 || $# == 1 && ($1 == 'help') ]]; then
    echo 'Usage:'
    echo -e "${PURPLE}run <COMMAND> <PRESET=min|max|...>${NC}: run command with the specicied preset"
    echo -e "${PURPLE}run <COMMAND> <PHP_VERSION> <LARAVEL_VERSION> <DEPENDENCY_VERSION=lowest|stable> <DB_ENGINE=sqlite|mysql|pgsql|sqlsrv> <DATABASE_VERSION>${NC}: run command with the specicied requirements"
    echo -e "${PURPLE}run <COMMAND>${NC}: run command with the same requirements as previous run"
    echo
    echo 'Available commands:'
    echo -e "${PURPLE}setup${NC}: just setup the containers with the provided requirements"
    echo -e "${PURPLE}test${NC}: run PHPUnit tests"
    echo -e "${PURPLE}cs${NC}: run PHP_CodeSniffer (show errors)"
    echo -e "${PURPLE}cbf${NC}: run PHP Code Beautifier and Fixer (fix errors)"
    echo -e "${PURPLE}help${NC}: this screen"

    exit 0
fi

command=$1

if [ $# -eq 1 ] && [ ! -f .env ]; then
    $myself $command $preset_max
    exit $?
fi

# Try to load preset
if [[ $# = 2 && $2 =~ ^[a-zA-Z_]+$ ]]; then
    preset="preset_$2"
    if [ -z ${!preset+x} ]; then
        echo -e "${RED}Preset $2 does not exist${NC}"
        exit 1
    fi
    args=${!preset}
    $myself $command $args
    exit $?
fi

# Rebuild PHP image if needed
if [ $# -gt 1 ]; then

    # Set env variables for docker compose
    env_add COMPOSE_PROJECT_NAME $compose_project_name
    env_add UID $(id -u)
    env_add GID $(id -g)
    env_add COMPOSER_CACHE_DIR $(composer config -g cache-dir 2>/dev/null || echo "$HOME/.composer/cache")

    php_version=$2
    laravel_version=${3:-'*'}
    dependency_version=${4:-'stable'}
    db_engine=${5:-'sqlite'}
    db_version=${6:-''}

    echo
    echo 'Using:'
    echo -e "- PHP ${PURPLE}${php_version}${NC}"
    echo -e "- Laravel ${PURPLE}${laravel_version}${NC}"
    echo -e "- ${PURPLE}${dependency_version}${NC} dependencies"
    echo -e "- Database ${PURPLE}${db_engine} ${db_version}${NC}"
    echo

    env_replace PHP_VERSION $php_version
    env_replace MYSQL_VERSION $mysql_version
    env_replace DB_ENGINE $db_engine
    env_replace DB_VERSION $db_version

    docker compose down
    docker volume rm ${compose_project_name}_mysql_data >/dev/null 2>&1 
fi

# Start containers
docker compose up --no-recreate -d

# Reinstall packages if needed
if [ $# -gt 1 ]; then
    docker compose exec php rm -f /app/composer.lock
    docker compose exec php composer update --with laravel/framework:$laravel_version --prefer-$dependency_version --prefer-dist --no-interaction
fi

# Run tests
echo
if [[ $1 == 'test' ]]; then
    docker compose exec php ./vendor/bin/phpunit
elif [[ $1 == 'cs' ]]; then
    docker compose exec php ./vendor/bin/phpcs --standard=./phpcs.xml ./src
elif [[ $1 == 'cbf' ]]; then
    docker compose exec php ./vendor/bin/phpcbf --standard=./phpcs.xml ./src ./tests
elif [[ $1 != 'setup' ]]; then
    $myself help
    exit $?
fi
echo

# Show remaining containers
echo -e "${GRAY}Remaining containers:${NC}"
echo -e "${GRAY}=====================${NC}"
docker compose ps -a
